import { appConfig } from "@config/app";
import AppContainer from "@config/container";
import type { InsertUser, SelectUser } from "@db/schemas/users";
// tests/helpers/DatabaseTestHelper.ts
import { DrizzleCli } from "@db/scripts/DrizzleCli";
import { faker } from "@faker-js/faker";
import { sql } from "drizzle-orm";
import type { MySql2Database } from "drizzle-orm/mysql2/driver";
import jwt from "jsonwebtoken";

/**
 * DatabaseTestHelper provides utility methods for setting up and cleaning up
 * the test database, as well as helper methods for user creation and JWT generation.
 *
 * It handles:
 *  - Running migrations to update the test database schema.
 *  - Resolving the database connection from the DI container.
 *  - Cleaning up specified tables after tests.
 *  - Constructing an InsertUser object with default values (using @faker-js/faker) with optional overrides.
 *  - Creating a user via UsersModel using the InsertUser data.
 *  - Generating a JWT for a given user.
 *
 * Usage:
 *   const dbHelper = new DatabaseTestHelper();
 *   beforeAll(async () => { await dbHelper.setup(); });
 *   afterAll(async () => { await dbHelper.cleanup(); });
 */
export class DatabaseTestHelper {
    public db: MySql2Database;
    // List of tables to truncate during cleanup.
    private tables: string[] = ["users"];

    constructor() {
        // Resolve the database connection immediately.
        this.db = AppContainer.resolve("db");
    }

    /**
     * Sets up the test database by running migrations.
     *
     * This method runs the migration command via DrizzleCli to update the schema.
     */
    async setup(): Promise<void> {
        const cli = new DrizzleCli();
        await cli.migrationsMigrateCommand();
    }

    /**
     * Cleans up the test database by truncating each table listed in the 'tables' array.
     */
    async cleanup(): Promise<void> {
        for (const table of this.tables) {
            await this.db.execute(sql.raw(`TRUNCATE TABLE ${table};`));
        }
    }

    /**
     * Constructs an InsertUser object using default values generated by @faker-js/faker,
     * with optional overrides provided by the caller.
     *
     * This method only creates the InsertUser object (which is used for database insertion)
     * and does not persist it.
     *
     * @param override - Optional partial user data to override the defaults.
     * @returns An InsertUser object with defaults merged with any overrides.
     */
    makeUser(override?: Partial<InsertUser>): InsertUser {
        const defaultUser: InsertUser = {
            name: faker.person.fullName(),
            email: faker.internet.email(),
            password: `${faker.internet.password()}4U!`,
        };
        return { ...defaultUser, ...override };
    }

    /**
     * Creates a new user in the database.
     *
     * This method constructs the InsertUser object using makeUser() and then persists it
     * via the UsersModel, returning the created user (of type SelectUser).
     *
     * @param override - Optional partial user data to override the defaults.
     * @returns A Promise resolving to the created user.
     */
    async createUser(override?: Partial<InsertUser>): Promise<SelectUser> {
        const userData = this.makeUser(override);
        const usersModel = AppContainer.resolve("UsersModel");
        return await usersModel.create(userData);
    }

    /**
     * Generates a JWT for the provided user.
     *
     * @param user - A user object (of type SelectUser) for whom to generate a JWT.
     * @returns A JWT string that includes the user's ID.
     */
    createUserJwt(user: SelectUser): string {
        return jwt.sign({ id: user.id }, appConfig.passport.strategies.jwt.secret, { expiresIn: "1h" });
    }
}
