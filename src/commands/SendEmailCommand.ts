import { BaseCommand } from "@commands/BaseCommand";
import AppContainer from "@config/container";
import type { SelectUser } from "@db/schemas/users";
import chalk from "chalk";
import type { Address } from "nodemailer/lib/mailer";
import ora from "ora";

/**
 * SendEmailCommand implements a CLI command.
 *
 * This file was generated by the plop generator.
 *
 * Customize this command by editing the handleAction method.
 */
export class SendEmailCommand extends BaseCommand {
    protected commandName = "user:email";
    protected commandDescription = "sends an email using the given user id and template";
    protected commandArgument = "<userId>";
    protected argumentDescription = "the user id to send an email to";

    protected validTemplateNames = ["new-user"];

    constructor() {
        super();
        this.configureCommand();
    }

    configureCommand() {
        super.configureCommand();
        this.argument("<template>", `template to use. must be one of this: ${this.validTemplateNames.join(", ")}`);
        this.option("-j, --job", "Use email job to queue the email send", false);
    }

    /**
     * Executes the command's action.
     *
     * @param userId
     * @param templateName
     * @param options
     */
    public async handleAction(
        userId: number,
        templateName: string,
        options: { job: boolean; template?: string },
    ): Promise<void> {
        const spinner = ora("Executing command...").start();
        try {
            if (!this.validTemplateNames.includes(templateName)) {
                throw new Error(`Invalid template name. Valid names are "${this.validTemplateNames.join('", "')}"`);
            }

            if (options.job) {
                await AppContainer.resolve("UserMailJob").queue({
                    userId,
                    templateName,
                    templateVars: {},
                });
            } else {
                const user = await this.getUserById(userId);
                if (!user) {
                    throw new Error(`No user with id ${userId} was found`);
                }
                await this.sendEmail(
                    templateName,
                    {
                        name: user.name,
                        address: user.email,
                    },
                    { user },
                );
            }
            spinner.succeed(chalk.green("Command executed successfully!"));
        } catch (e) {
            const error = e as Error;
            spinner.fail(chalk.red("Command execution failed."));
            this.error(error.message);
        }
    }

    getUserById(id: number): Promise<SelectUser | null> {
        return AppContainer.resolve("UsersModel").findById(id);
    }

    sendEmail(template: string, to: string | Address, locals: Record<string, unknown>) {
        return AppContainer.resolve("EmailTemplateService").sendEmail(template, to, locals);
    }
}
