import { describe, expect, it } from "bun:test";
import { {{properCase name}}Job, type {{properCase name}}JobData } from "@jobs/{{properCase name}}Job";
import { BullMQTestHelper } from "@test-helpers/BullMQTestHelper";
import { LoggerTestHelper } from "@test-helpers/LoggerTestHelper";
import type { Job } from "bullmq";

describe("{{properCase name}}Job", () => {
const jobQueueName = "{{queueName}}";
const jobWorkerName = "{{properCase name}}Worker";

const { bullMQModule, addJobMocked } = BullMQTestHelper.createBullMQModuleInstance([jobQueueName]);
const mockLoggerRegistry = LoggerTestHelper.createMockLoggerRegistry();
const jobInstance = new {{properCase name}}Job(bullMQModule, mockLoggerRegistry);

it("should queue a job successfully", async () => {
const jobData: {{properCase name}}JobData = { name: "Alice" };
const job = await jobInstance.queue(jobData);

expect(addJobMocked).toHaveBeenCalledWith(jobQueueName, jobWorkerName, jobData);
expect(job).toBeDefined();
expect(job.id).toBe("mock-job-id");
expect(job.queueName).toBe(jobQueueName);
expect(job.name).toBe(jobWorkerName);
expect(job.data).toStrictEqual(jobData);
});

it("should process job and log output", async () => {
const mockJob = { id: "123", data: { name: "Alice" } } as unknown as Job<{{properCase name}}JobData>;
    const result = await jobInstance.worker(mockJob);

    expect(result).toBe("Processing {{properCase name}}Job for Alice");
    });

    it("should log an error if job data is missing", async () => {
    const mockJob = { id: "123", data: {} } as unknown as Job<{{properCase name}}JobData>;

        expect(jobInstance.worker(mockJob)).rejects.toThrow();
        });
        });
